{"version":3,"sources":["DatabaseReader.vue"],"names":[],"mappings":";;;;;;;;;;AAoCA;;;;AACA;;;;AACA;;AACA;;;;AAEA;;AACA;;;;;;AAKA;;;;AAIA;;;;AAQA;;;;AAUA;AACA;AADA;AAGA;;;;;;;AAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AAEA;AACA;;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAGA;;AAGA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;;AACA;AACA;AAEA;AACA;;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;;AA7GA;AAAA;AAFA;AADA","sourcesContent":["<template>\n  <v-card class=\"elevation-0\">\n    <v-card-subtitle\n      >Easily load any supported Heimdall Data Format file</v-card-subtitle\n    >\n    <v-container>\n      <v-data-table\n        dense\n        :headers=\"headers\"\n        :items=\"items\"\n        :search=\"search\"\n        :hide-default-header=\"hideHeaders\"\n        :show-select=\"showSelect\"\n        :loading=\"isLoading\"\n        item-key=\"name\"\n        class=\"elevation-1\"\n      >\n        <template v-slot:body=\"{ items }\">\n          <tbody>\n            <tr v-for=\"item in items\" :key=\"item.name\">\n              <td>{{ item.filename }}</td>\n              <td>{{ item.version }}</td>\n              <td>\n                <v-btn icon @click=\"load_this_evaluation(item)\">\n                  <v-icon>mdi-plus-circle</v-icon>\n                </v-btn>\n              </td>\n            </tr>\n          </tbody>\n        </template>\n      </v-data-table>\n    </v-container>\n  </v-card>\n</template>\n\n<script lang=\"ts\">\nimport Vue from \"vue\";\nimport Component from \"vue-class-component\";\nimport { getModule } from \"vuex-module-decorators\";\nimport ServerModule from \"@/store/server\";\nimport AppInfoModule from \"@/store/app_info\";\nimport { plainToClass } from \"class-transformer\";\nimport InspecIntakeModule, {\n  FileID,\n  next_free_file_ID\n} from \"@/store/report_intake\";\n\nexport class Content {\n  name!: string;\n  value!: string;\n}\nexport class Evaluation {\n  id!: number;\n  filename!: string;\n  version!: string;\n  createdAt!: Date;\n  updatedAt!: Date;\n  tags!: Tag[];\n}\nexport class Tag {\n  id!: number;\n  tagger_id!: number;\n  tagger_type!: string;\n  content!: Content;\n  createdAt!: Date;\n  updatedAt!: Date;\n}\n\n// We declare the props separately to make props types inferable.\nconst Props = Vue.extend({\n  props: {}\n});\n/**\n * File reader component for taking in inspec JSON data.\n * Uploads data to the store with unique IDs asynchronously as soon as data is entered.\n * Emits \"got-files\" with a list of the unique_ids of the loaded files.\n */\n@Component({\n  components: {}\n})\nexport default class DatabaseReader extends Props {\n  get headers(): Object[] {\n    return [\n      {\n        text: \"Filename\",\n        align: \"start\",\n        sortable: true,\n        value: \"filename\"\n      },\n      { text: \"Version\", sortable: true, value: \"version\" },\n      { text: \"Select\", value: \"select\" }\n    ];\n  }\n  get search(): string {\n    return \"\";\n  }\n  get hideHeaders(): Boolean {\n    return false;\n  }\n  get showSelect(): Boolean {\n    return false;\n  }\n  get isLoading(): Boolean {\n    return false;\n  }\n\n  get items(): Evaluation[] {\n    let mod = getModule(ServerModule, this.$store);\n    if (mod.user_evaluations) {\n      let eval_obj = Array.from(mod.user_evaluations) || [];\n      const evals: Evaluation[] = eval_obj.map((x: any) =>\n        plainToClass(Evaluation, x)\n      );\n      console.log(\"evals: \" + evals.length);\n      evals.forEach(eva => {\n        eva.filename = this.evaluation_label(eva);\n      });\n      return evals;\n    } else {\n      return [new Evaluation()];\n    }\n  }\n  get personal_evaluations(): Evaluation[] {\n    let mod = getModule(ServerModule, this.$store);\n    if (mod.user_evaluations) {\n      let eval_obj = Array.from(mod.user_evaluations) || [];\n      const evals: Evaluation[] = eval_obj.map((x: any) =>\n        plainToClass(Evaluation, x)\n      );\n      console.log(\"evals: \" + evals.length);\n      return evals;\n    } else {\n      return [new Evaluation()];\n    }\n  }\n\n  evaluation_label(evaluation: Evaluation): string {\n    let label = evaluation.version;\n    if (evaluation.tags) {\n      evaluation.tags.forEach(tag => {\n        console.log(\"tag \" + tag.content.name + \": \" + tag.content.value);\n        if (tag.content.name == \"filename\") {\n          label = tag.content.value;\n        }\n      });\n    }\n    return label;\n  }\n\n  async load_this_evaluation(evaluation: Evaluation): Promise<void> {\n    console.log(\"load this file: \" + evaluation.id);\n    const host = process.env.VUE_APP_API_URL!;\n    // Generate an id\n    let unique_id = next_free_file_ID();\n\n    // TODO\n    let filename = \"evaluation\";\n\n    // Get intake module\n    let intake_module = getModule(InspecIntakeModule, this.$store);\n    let mod = getModule(ServerModule, this.$store);\n    await mod\n      .connect(host)\n      .catch(bad => {\n        console.error(\"Unable to connect to \" + host);\n      })\n      .then(() => {\n        console.log(\"here\");\n        return mod.retrieve_evaluation(evaluation.id);\n      })\n      .catch(bad => {\n        console.error(`bad login ${bad}`);\n      })\n      .then(() => {\n        console.log(\"here2\");\n        if (mod.evaluation) {\n          console.log(\"here3\");\n          //let upload = `{\"unique_id\": ${unique_id},\"filename\": \"${filename}\",\"execution\":${JSON.stringify(\n          //  mod.evaluation\n          //)}}`;\n          intake_module.loadText({\n            text: JSON.stringify(mod.evaluation),\n            unique_id: unique_id,\n            filename: filename\n          });\n          console.log(\"Loaded \" + unique_id);\n          this.$emit(\"got-files\", [unique_id]);\n        }\n      });\n  }\n}\n</script>\n"]}