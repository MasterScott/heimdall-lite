{"version":3,"sources":["AuthStepMFA.vue"],"names":[],"mappings":";;;;;;;;;AAiCA;;;;AACA;;;;AAIA;;;;AASA;AACA;AACA;AACA;AACA;AAFA;AADA;AAOA;;;AACA;AAEA;;;;;;AAMA;AAAA;;AACA;;;;AAGA;AAEA;;AACA;;AAEA;AAwBA;AApBA;;;AACA;AACA;AACA;AAEA;;;AACA;AACA;AACA;AAEA;;;AACA;AACA;AACA;AACA;AAEA;;;AACA;AACA;AACA;;AAhCA;AAAA","sourcesContent":["<template>\n  <v-stepper-content step=\"2\">\n    <v-form v-model=\"valid\">\n      <v-text-field\n        :value=\"mfa_token\"\n        @input=\"change_mfa_token\"\n        @keyup.enter=\"proceed\"\n        label=\"MFA Token\"\n        :rules=\"[req_rule, mfa_rule]\"\n      />\n      <v-text-field\n        :value=\"mfa_serial\"\n        @input=\"change_mfa_serial\"\n        @keyup.enter=\"proceed\"\n        label=\"MFA Device ARN (Optional)\"\n        hint=\"Defaults to virtual IAM device\"\n      />\n      <v-btn\n        color=\"primary\"\n        :disabled=\"!valid\"\n        class=\"my-2 mr-2\"\n        @click=\"$emit('auth-mfa')\"\n      >\n        Login\n      </v-btn>\n      <v-btn color=\"red\" @click=\"proceed\" class=\"my-2 ml-2\">\n        Cancel\n      </v-btn>\n    </v-form>\n  </v-stepper-content>\n</template>\n\n<script lang=\"ts\">\nimport Vue from \"vue\";\nimport Component from \"vue-class-component\";\nimport { getModule } from \"vuex-module-decorators\";\nimport S3, { ObjectKey } from \"aws-sdk/clients/s3\";\nimport { AWSError } from \"aws-sdk/lib/error\";\nimport { LocalStorageVal } from \"../../../../utilities/helper_util\";\nimport {\n  Auth,\n  transcribe_error,\n  get_session_token,\n  MFA_Info\n} from \"../../../../utilities/aws_util\";\nimport InspecIntakeModule, { FileID } from \"@/store/report_intake\";\n\n// We declare the props separately to make props types inferable.\nconst Props = Vue.extend({\n  props: {\n    mfa_serial: String,\n    mfa_token: String\n  }\n});\n\n/** Localstorage keys */\nconst local_mfa_serial = new LocalStorageVal<string>(\"aws_s3_mfa_serial\");\n\n/**\n * File reader component for taking in inspec JSON data.\n * Uploads data to the store with unique IDs asynchronously as soon as data is entered.\n * Emits \"got-files\" with a list of the unique_ids of the loaded files.\n */\n@Component({})\nexport default class S3Reader extends Props {\n  /** Models if currently displayed form is valid.\n   * Shouldn't be used to interpret literally anything else as valid - just checks fields filled\n   */\n  valid: boolean = false;\n\n  /** Form required field rules. Maybe eventually expand to other stuff */\n  req_rule = (v: string | null | undefined) =>\n    (v || \"\").trim().length > 0 || \"Field is Required\";\n  mfa_rule = (v: string | null | undefined) =>\n    (v || \"\").trim().match(\"^\\\\d{6}$\") !== null ||\n    \"Field must be the 6 number code from a valid authenticator device\";\n\n  /** On mount, try to look up stored auth info */\n  mounted() {\n    this.change_mfa_serial(local_mfa_serial.get_default(\"\"));\n  }\n\n  /** Handles changes to mfa serial */\n  change_mfa_token(new_value: string) {\n    this.$emit(\"update:mfa_token\", new_value);\n  }\n\n  /** Handles changes to mfa token */\n  change_mfa_serial(new_value: string) {\n    local_mfa_serial.set(new_value);\n    this.$emit(\"update:mfa_serial\", new_value);\n  }\n\n  /** When button is pressed or enter is pressed */\n  proceed() {\n    this.$emit(\"exit-mfa\");\n  }\n}\n</script>\n"]}