{"file":"/Users/sjoshi/test/heimdall-lite/tests/util/fs.ts","mappings":";;;AAAA,+CAAyB;AAEzB,kDAAkD;AAClD,SAAgB,UAAU,CAAC,QAAgB;IACzC,oBAAoB;IACpB,IAAI,MAAM,GAAG,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IAEtC,mBAAmB;IACnB,OAAO,MAAM,CAAC,IAAI,EAAE,CAAC;AACvB,CAAC;AAND,gCAMC;AAUD,SAAgB,UAAU,CAAC,QAAgB;IACzC,iBAAiB;IACjB,IAAI,KAAK,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC;IAEjC,gBAAgB;IAChB,IAAI,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;QAChC,IAAI,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,QAAQ,GAAG,QAAQ,EAAE,OAAO,CAAC,CAAC;QAC5D,IAAI,MAAM,GAAe;YACvB,IAAI,EAAE,QAAQ;YACd,OAAO;SACR,CAAC;QACF,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;AAChB,CAAC;AAdD,gCAcC;AAGD,SAAS,aAAa,CAAC,OAAqB;IAC1C,IAAI,IAAI,GAAa,EAAE,CAAC;IACxB,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;QAClB,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC;IACH,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAgB,SAAS;IACvB,IAAI,OAAO,GAAG,UAAU,CAAC,wBAAwB,CAAC,CAAC;IACnD,OAAO,aAAa,CAAC,OAAO,CAAC,CAAC;AAChC,CAAC;AAHD,8BAGC;AAED,SAAgB,OAAO;IACrB,IAAI,OAAO,GAAG,UAAU,CAAC,mCAAmC,CAAC,CAAC;IAC9D,OAAO,aAAa,CAAC,OAAO,CAAC,CAAC;AAChC,CAAC;AAHD,0BAGC;AAED,SAAgB,MAAM;IACpB,IAAI,OAAO,GAAG,UAAU,CAAC,0BAA0B,CAAC,CAAC;IACrD,OAAO,aAAa,CAAC,OAAO,CAAC,CAAC;AAChC,CAAC;AAHD,wBAGC","names":[],"sources":["/Users/sjoshi/test/heimdall-lite/tests/util/fs.ts"],"sourcesContent":["import * as fs from \"fs\";\n\n/** Returns sorted list of files in a directory */\nexport function list_files(dir_path: string) {\n  // Init result array\n  let result = fs.readdirSync(dir_path);\n\n  // Sort by filename\n  return result.sort();\n}\n\nexport interface FileResult {\n  /** The filename */\n  name: string;\n\n  /** The file's content (utf-8) */\n  content: string;\n}\n\nexport function read_files(dir_name: string): FileResult[] {\n  // List the files\n  let files = list_files(dir_name);\n\n  // Read them all\n  let result = files.map(filename => {\n    let content = fs.readFileSync(dir_name + filename, \"utf-8\");\n    let result: FileResult = {\n      name: filename,\n      content\n    };\n    return result;\n  });\n  return result;\n}\n\nexport type FileHash = { [key: string]: FileResult };\nfunction populate_hash(results: FileResult[]) {\n  let hash: FileHash = {};\n  results.forEach(f => {\n    hash[f.name] = f;\n  });\n  return hash;\n}\n\nexport function AllCounts(): FileHash {\n  let results = read_files(\"tests/hdf_data/counts/\");\n  return populate_hash(results);\n}\n\nexport function AllInfo(): FileHash {\n  let results = read_files(\"tests/hdf_data/inspec_tools_info/\");\n  return populate_hash(results);\n}\n\nexport function AllRaw(): FileHash {\n  let results = read_files(\"tests/hdf_data/raw_data/\");\n  return populate_hash(results);\n}\n"],"version":3}