{"file":"/Users/sjoshi/test/heimdall-lite/src/store/status_counts.ts","mappings":"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","names":[],"sources":["/Users/sjoshi/test/heimdall-lite/src/store/status_counts.ts"],"sourcesContent":["/**\n * Counts the statuses of controls.\n */\n\nimport { Module, VuexModule, getModule } from \"vuex-module-decorators\";\nimport FilteredData, { Filter, filter_cache_key } from \"@/store/data_filters\";\nimport Store from \"@/store/store\";\nimport LRUCache from \"lru-cache\";\nimport { ControlStatus } from \"inspecjs\";\nimport InspecDataModule from \"@/store/data_store\";\n\n// The hash that we will generally be working with herein\nexport type StatusHash = { [key in ControlStatus]: number };\n\n// Helper function for counting a status in a list of controls\nfunction count_statuses(data: FilteredData, filter: Filter): StatusHash {\n  // Remove the status filter from the control filter\n  let new_filter: Filter = {\n    status: undefined,\n    ...filter\n  };\n\n  // Get the controls\n  let controls = data.controls(new_filter);\n\n  // Count 'em out\n  let hash: StatusHash = {\n    Failed: 0,\n    \"From Profile\": 0,\n    \"Not Applicable\": 0,\n    \"Not Reviewed\": 0,\n    Passed: 0,\n    \"Profile Error\": 0\n  };\n  controls.forEach(c => {\n    let status: ControlStatus = c.root.hdf.status;\n    hash[status] += 1;\n  });\n\n  // And we're done\n  return hash;\n}\n\n@Module({\n  namespaced: true,\n  dynamic: true,\n  store: Store,\n  name: \"statusCounts\"\n})\nclass StatusCountModule extends VuexModule {\n  /** Use vuex caching to always have access to our filtered data module */\n  private get filtered_data(): FilteredData {\n    return getModule(FilteredData, Store);\n  }\n\n  /** Ditto to base data, for dependency purposes */\n  private get inspec_data(): InspecDataModule {\n    return getModule(InspecDataModule, Store);\n  }\n\n  /** Generates a hash mapping each status -> a count of its members */\n  get hash(): (filter: Filter) => StatusHash {\n    // Establish our cache and dependency\n    let depends: any = this.inspec_data.contextualControls;\n    let cache: LRUCache<string, StatusHash> = new LRUCache(30);\n\n    return (filter: Filter) => {\n      let id = filter_cache_key(filter);\n      let cached = cache.get(id);\n      // If cache hits, just return\n      if (cached !== undefined) {\n        return cached;\n      }\n\n      // Elsewise, generate, cache, then return\n      let result = count_statuses(this.filtered_data, filter);\n      cache.set(id, result);\n      return result;\n    };\n  }\n\n  get passed(): (filter: Filter) => number {\n    return filter => this.hash(filter)[\"Passed\"];\n  }\n\n  get failed(): (filter: Filter) => number {\n    return filter => this.hash(filter)[\"Failed\"];\n  }\n\n  get notApplicable(): (filter: Filter) => number {\n    return filter => this.hash(filter)[\"Not Applicable\"];\n  }\n\n  get notReviewed(): (filter: Filter) => number {\n    return filter => this.hash(filter)[\"Not Reviewed\"];\n  }\n\n  get profileError(): (filter: Filter) => number {\n    return filter => this.hash(filter)[\"Profile Error\"];\n  }\n\n  get fromProfile(): (filter: Filter) => number {\n    return filter => this.hash(filter)[\"From Profile\"];\n  }\n}\n\nexport default StatusCountModule;\n"],"version":3}