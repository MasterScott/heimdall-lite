281caaecd1f77cac546818191ceea2ee
;(function(){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _tslib = require("tslib");

var _vue = require("vue");

var _vue2 = _interopRequireDefault(_vue);

var _vueClassComponent = require("vue-class-component");

var _vueClassComponent2 = _interopRequireDefault(_vueClassComponent);

var _vuexModuleDecorators = require("vuex-module-decorators");

var _UploadButton = require("@/components/global/UploadButton.vue");

var _UploadButton2 = _interopRequireDefault(_UploadButton);

var _report_intake = require("@/store/report_intake");

var _report_intake2 = _interopRequireDefault(_report_intake);

var _app_info = require("@/store/app_info");

var _app_info2 = _interopRequireDefault(_app_info);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// We declare the props separately to make props types inferable.
const Props = _vue2.default.extend({
  props: {}
});
/**
 * File reader component for taking in inspec JSON data.
 * Uploads data to the store with unique IDs asynchronously as soon as data is entered.
 * Emits "got-files" with a list of the unique_ids of the loaded files.
 */


let FileReader = class FileReader extends Props {
  /** Callback for our file reader */
  commit_files(files) {
    let valid_ids = []; // Use this to track those that get successfully uploaded
    // Promise an upload of each

    let upload_promises = files.map(file => {
      // Generate file id
      let unique_id = (0, _report_intake.next_free_file_ID)(); // Submit it to be loaded, and display an error if it fails

      let intake_module = (0, _vuexModuleDecorators.getModule)(_report_intake2.default, this.$store);
      return intake_module.loadFile({
        file,
        unique_id
      }).then(err => {
        if (err) {
          console.error(`Error loading file ${file.name}`);
          this.$toasted.global.error({
            message: String(err),
            isDark: this.$vuetify.theme.dark
          });
        } else {
          // Store the given id as valid
          valid_ids.push(unique_id);
        }
      });
    }); // When they're all done, emit event.
    // To use promise.all we must make each promise explicitly allow rejection without breaking promise.all failfast

    let guaranteed_promises = upload_promises.map(p => p.catch(err => err));
    Promise.all(guaranteed_promises).then(_ => this.$emit("got-files", valid_ids));
  }

  get title_class() {
    if (this.$vuetify.breakpoint.mdAndUp) {
      return ["display-4", "px-0"];
    } else {
      return ["display-2", "px-0"];
    }
  }

  get version() {
    return (0, _vuexModuleDecorators.getModule)(_app_info2.default, this.$store).version;
  }

};
FileReader = (0, _tslib.__decorate)([(0, _vueClassComponent2.default)({
  components: {
    UploadButton: _UploadButton2.default
  }
})], FileReader);
exports.default = FileReader; //# sourceMappingURL=module.jsx.map
})()
var defaultExport = (module.exports.__esModule) ? module.exports.default : module.exports;var __vue__options__ = (typeof defaultExport === "function"? defaultExport.options: defaultExport)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-card',{staticClass:"elevation-0"},[_c('v-card-subtitle',[_vm._v("Easily load any supported Heimdall Data Format file")]),_vm._v(" "),_c('v-container',[_c('v-row',[_c('v-col',{attrs:{"cols":"12","align":"center"}},[_c('img',{staticStyle:{"max-width":"164px","max-height":"164px"},attrs:{"src":"@/assets/logo-orange-tsp.svg","svg-inline":""}})])],1),_vm._v(" "),_c('v-row',[_c('v-col',{attrs:{"cols":"12","align":"center"}},[_c('div',{staticClass:"d-flex flex-column justify-center"},[_c('span',{class:_vm.title_class},[_vm._v("Heimdall")]),_vm._v(" "),_c('span',{class:_vm.title_class},[_vm._v("Lite")])])])],1),_vm._v(" "),_c('v-row',[_c('v-spacer'),_vm._v(" "),_c('v-col',{attrs:{"align":"center","cols":"4"}},[_c('UploadButton',{on:{"files-selected":_vm.commit_files}})],1),_vm._v(" "),_c('v-col',{attrs:{"align":"right","cols":"4"}},[_c('a',{staticClass:"mr-2",attrs:{"href":"https://mitre.github.io/heimdall-lite-1.0/","target":"_blank"}},[_vm._v("\n          Looking for 1.0?\n        ")])])],1)],1)],1)}
__vue__options__.staticRenderFns = []
