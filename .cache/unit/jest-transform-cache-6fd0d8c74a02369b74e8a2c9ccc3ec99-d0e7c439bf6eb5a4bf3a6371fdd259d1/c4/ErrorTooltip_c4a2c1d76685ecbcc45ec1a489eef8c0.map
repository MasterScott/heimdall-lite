{"version":3,"sources":["ErrorTooltip.vue"],"names":[],"mappings":";;;;;;;;;AAaA;;;;AACA;;;;;;AAOA;AACA;AACA;AADA;;AAOA;AAAA;;AACA;;AACA;AAEA;;AACA;AAcA;AAZA;;;AACA;AACA;AACA;;AAGA;AACA;AACA;AAFA;AAIA;AACA;;AAlBA;AAAA;AAFA;AADA","sourcesContent":["<template>\n  <v-tooltip :value=\"errors.length\" top :open-on-hover=\"false\">\n    <template #activator=\"data\">\n      <slot v-on=\"data.on\" />\n    </template>\n    <ul>\n      <li><strong>Errors encountered:</strong></li>\n      <li v-for=\"item in errors\" :key=\"item.key\" v-text=\"item.text\" />\n    </ul>\n  </v-tooltip>\n</template>\n\n<script lang=\"ts\">\nimport Vue from \"vue\";\nimport Component from \"vue-class-component\";\n\ninterface ErrorItem {\n  key: number;\n  text: string;\n}\n\n// We declare the props separately to make props types inferable.\nconst Props = Vue.extend({\n  props: {}\n});\n\n@Component({\n  components: {}\n})\nexport default class ErrorTooltip extends Props {\n  /** What error is currently shown, if any. Shared between stages. */\n  errors: ErrorItem[] = [];\n\n  /** Need this for proper key resolution */\n  counter: number = 0;\n\n  /** Callback to show errors */\n  show_error(message: string): void {\n    // Increment counter\n    this.counter += 1;\n\n    // Add the error, but clear it after X seconds\n    this.errors.push({\n      text: message,\n      key: this.counter\n    });\n    setTimeout(() => this.errors.shift(), 12000);\n  }\n}\n</script>\n"]}