05f0229c6fbdd6d67268fce14bfa4d8c
"use strict";
/**
 * This module provides a cached, reusable method for filtering data from data_store.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const vuex_module_decorators_1 = require("vuex-module-decorators");
const data_store_1 = tslib_1.__importStar(require("@/store/data_store"));
const store_1 = tslib_1.__importDefault(require("@/store/store"));
const lru_cache_1 = tslib_1.__importDefault(require("lru-cache"));
const inspecjs_1 = require("inspecjs");
const MAX_CACHE_ENTRIES = 20;
/**
 * Facillitates the search functionality
 * @param term The string to search with
 * @param context_control The control to search for term in
 */
function contains_term(context_control, term) {
    let as_hdf = context_control.root.hdf;
    // Get our (non-null) searchable data
    let searchables = [
        as_hdf.wraps.id,
        as_hdf.wraps.title,
        as_hdf.wraps.code,
        as_hdf.severity,
        as_hdf.status,
        as_hdf.finding_details
    ].filter(s => s !== null);
    // See if any contain term
    return searchables.some(s => s.toLowerCase().includes(term));
}
let FilteredDataModule = class FilteredDataModule extends vuex_module_decorators_1.VuexModule {
    get dataStore() {
        return vuex_module_decorators_1.getModule(data_store_1.default, store_1.default);
    }
    /**
     * Parameterized getter.
     * Get all profiles from the specified file id.
     * Filters only based on the file ID
     */
    get profiles() {
        // Setup a cache for this run
        const depends = this.dataStore.contextualProfiles;
        const localCache = new lru_cache_1.default(MAX_CACHE_ENTRIES);
        return (file) => {
            // Generate a cache id
            let cached = localCache.get(file);
            if (cached !== undefined) {
                return cached;
            }
            // Initialize our list to add valid profiles to
            let profiles = [];
            // Filter to those that match our filter. In this case that just means come from the right file id
            this.dataStore.contextualProfiles.forEach(prof => {
                if (data_store_1.isFromProfileFile(prof)) {
                    if (prof.from_file.unique_id === file) {
                        profiles.push(prof);
                    }
                }
                else {
                    // Its a report; go two levels up to get its file
                    let ev = prof.sourced_from;
                    if (ev.from_file.unique_id === file) {
                        profiles.push(prof);
                    }
                }
            });
            return profiles;
        };
    }
    /**
     * Parameterized getter.
     * Get all controls from all profiles from the specified file id.
     * Utlizes the profiles getter to accelerate the file filter.
     */
    get controls() {
        /** Cache by filter */
        const depends = this.dataStore.contextualControls;
        const localCache = new lru_cache_1.default(MAX_CACHE_ENTRIES);
        return (filter = {}) => {
            // Generate a hash for cache purposes.
            // If the "search_term" string is not null, we don't cache - no need to pollute
            let id = filter_cache_key(filter);
            // Check if we have this cached:
            let cached = localCache.get(id);
            if (cached !== undefined) {
                return cached;
            }
            // First get all of the profiles using the same filter
            let profiles;
            let controls;
            if (filter.fromFile !== undefined) {
                // Get profiles
                profiles = this.profiles(filter.fromFile);
                // And all the controls they contain
                controls = profiles.flatMap(profile => profile.contains);
            }
            else {
                // No file filter => we don't care about profile. Jump directly to the full control list
                controls = this.dataStore.contextualControls;
            }
            // Filter by control id
            if (filter.control_id !== undefined) {
                controls = controls.filter(c => c.data.id === filter.control_id);
            }
            // Filter by status, if necessary
            if (filter.status !== undefined) {
                controls = controls.filter(control => control.root.hdf.status === filter.status);
            }
            // Filter by severity, if necessary
            if (filter.severity !== undefined) {
                controls = controls.filter(control => control.root.hdf.severity === filter.severity);
            }
            // Filter by overlay
            if (filter.omit_overlayed_controls) {
                controls = controls.filter(control => control.extended_by.length === 0);
            }
            // Filter by search term
            if (filter.search_term !== undefined) {
                let term = filter.search_term.toLowerCase();
                // Filter controls to those that contain search term
                controls = controls.filter(c => contains_term(c, term));
            }
            // Filter by nist stuff
            if (filter.tree_filters && filter.tree_filters.length > 0) {
                // Shorthand the nist filters
                let f = filter.tree_filters;
                // Construct a nist control to represent the filter
                let control = new inspecjs_1.nist.NistControl(filter.tree_filters);
                controls = controls.filter(c => {
                    // Get an hdf version so we have the fixed nist tags
                    return c.root.hdf.parsed_nist_tags.some(t => control.contains(t));
                });
            }
            // Freeze and save to cache
            let r = Object.freeze(controls);
            localCache.set(id, r);
            return r;
        };
    }
};
FilteredDataModule = tslib_1.__decorate([
    vuex_module_decorators_1.Module({
        namespaced: true,
        dynamic: true,
        store: store_1.default,
        name: "filteredData"
    })
], FilteredDataModule);
exports.default = FilteredDataModule;
/**
 * Generates a unique string to represent a filter.
 * Does some minor "acceleration" techniques such as
 * - annihilating empty search terms
 * - defaulting "omit_overlayed_controls"
 */
function filter_cache_key(f) {
    // fix the search term
    let new_search;
    if (f.search_term !== undefined) {
        new_search = f.search_term.trim();
    }
    else {
        new_search = "";
    }
    let new_f = {
        search_term: new_search,
        omit_overlayed_controls: f.omit_overlayed_controls || false,
        ...f
    };
    return JSON.stringify(new_f);
}
exports.filter_cache_key = filter_cache_key;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,