5eb9593f7b40b0ff2468cf3495fb0a3b
;(function(){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _tslib = require("tslib");

var _vue = require("vue");

var _vue2 = _interopRequireDefault(_vue);

var _vueClassComponent = require("vue-class-component");

var _vueClassComponent2 = _interopRequireDefault(_vueClassComponent);

var _vuexModuleDecorators = require("vuex-module-decorators");

var _report_intake = require("@/store/report_intake");

var _data_store = require("../../../../store/data_store");

var _data_store2 = _interopRequireDefault(_data_store);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const SEARCH_INTERVAL = 10000;

const Props = _vue2.default.extend({
  props: {
    endpoint: Object // Of type SplunkEndpoint. Can be null, but shouldn't be!

  }
});

let FileList = class FileList extends Props {
  constructor() {
    super(...arguments);
    /** The name written in the form */

    this.search = "";
    /** Table info */

    this.headers = [{
      text: "Filename",
      value: "filename",
      filterable: true,
      align: "start"
    }, {
      text: "Time",
      value: "start_time"
    }, {
      text: "Action",
      value: "action",
      sortable: false
    }];
    /** Currently fetch'd executions */

    this.items = [];
    /** When we should next search. If curr time > this, then search*/

    this.next_search_time = 0;
    /** Are we already searching? Track here */

    this.already_searching = false;
    /** Used for timer functions */

    this.last_search_time = 0;
  }
  /** Typed getter for endpoint */


  get _endpoint() {
    if (this.endpoint == null) {
      return null;
    }

    return this.endpoint;
  }
  /** Callback for when user selects a file.
   * Loads it into our system.
   * We assume we're auth'd if this is called
   */


  async load_event(event) {
    // Get it out of the list
    //let event = (null as unknown) as ExecutionMetaInfo;
    // Get its full event list and reconstruct
    return this._endpoint.get_execution(event.guid).then(exec => {
      let unique_id = (0, _report_intake.next_free_file_ID)();
      let file = {
        unique_id,
        filename: `${event.filename} (Splunk)`,
        execution: exec
      };
      (0, _vuexModuleDecorators.getModule)(_data_store2.default, this.$store).addExecution(file);
      this.$emit("got-files", [unique_id]);
    }).catch(fail => {
      this.$emit("error", fail);
    });
  }
  /** Updates search results, if it is appropriate to do so */


  search_poller() {
    if (!this._endpoint) {
      return;
    }

    let curr_time = new Date().getTime();

    if (curr_time > this.next_search_time && !this.already_searching) {
      // As an initial venture, try again in 60 seconds. See below for our actual expected search
      this.next_search_time = curr_time + 60000; // Then do the search

      this.already_searching = true;

      this._endpoint.fetch_execution_list().then(l => {
        // On success, save the items
        this.items = l; // Mark search done

        this.already_searching = false; // And make the next try sometime sooner than the previous attempt

        this.next_search_time = Math.min(curr_time + SEARCH_INTERVAL, this.next_search_time);
      }).catch(error => {
        this.items = [];
        this.already_searching = false;
        this.$emit("error", error);
      });
    }
  }

  logout() {
    this.$emit("exit-list");
    this.items = [];
  }

  time_since_last_search() {
    return new Date().getTime();
  } // Init search timers


  mounted() {
    this.searcher = setInterval(this.search_poller, 1000);
  } // Clear timer on destroy as well


  beforeDestroy() {
    if (this.searcher) {
      clearInterval(this.searcher);
    }
  }

};
FileList = (0, _tslib.__decorate)([(0, _vueClassComponent2.default)({
  components: {}
})], FileList);
exports.default = FileList; //# sourceMappingURL=module.jsx.map
})()
var defaultExport = (module.exports.__esModule) ? module.exports.default : module.exports;var __vue__options__ = (typeof defaultExport === "function"? defaultExport.options: defaultExport)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-stepper-content',{attrs:{"step":"2"}},[_c('div',{staticClass:"d-flex flex-column"},[_c('v-data-table',{attrs:{"headers":_vm.headers,"item-key":"guid","items":_vm.items,"search":_vm.search,"items-per-page":5},scopedSlots:_vm._u([{key:"top",fn:function(){return [_c('v-toolbar',[_c('v-toolbar-title',[_vm._v("Splunk Executions")]),_vm._v(" "),_c('v-divider',{staticClass:"mx-4",attrs:{"inset":"","vertical":""}}),_vm._v(" "),_c('v-spacer'),_vm._v(" "),_c('v-text-field',{attrs:{"append-icon":"search","label":"Search","single-line":"","hide-details":""},model:{value:(_vm.search),callback:function ($$v) {_vm.search=$$v},expression:"search"}})],1)]},proxy:true},{key:"item.action",fn:function(ref){
var item = ref.item;
return [_c('v-icon',{on:{"click":function($event){return _vm.load_event(item)}}},[_vm._v("\n          mdi-plus-circle\n        ")])]}},{key:"no-data",fn:function(){return [_vm._v("\n        No data. Try relaxing your search conditions, or expanding the date\n        range.\n      ")]},proxy:true}])}),_vm._v(" "),_c('v-btn',{staticClass:"my-2",attrs:{"color":"red"},on:{"click":_vm.logout}},[_vm._v("\n      Logout\n    ")])],1)])}
__vue__options__.staticRenderFns = []
