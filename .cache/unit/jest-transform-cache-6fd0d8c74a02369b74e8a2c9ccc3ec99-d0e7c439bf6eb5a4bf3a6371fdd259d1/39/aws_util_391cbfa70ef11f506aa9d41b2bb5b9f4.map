{"file":"/Users/sjoshi/test/heimdall-lite/src/utilities/aws_util.ts","mappings":"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","names":[],"sources":["/Users/sjoshi/test/heimdall-lite/src/utilities/aws_util.ts"],"sourcesContent":["import STS from \"aws-sdk/clients/sts\";\nimport S3 from \"aws-sdk/clients/s3\";\nimport { AWSError } from \"aws-sdk/lib/error\";\nimport { PromiseResult } from \"aws-sdk/lib/request\";\n\nexport const AUTH_DURATION = 8 * 60 * 60; // 8 hours\n\n/** represents the auth credentials for aws stuff */\nexport interface AuthCreds {\n  accessKeyId: string;\n  secretAccessKey: string;\n  sessionToken: string;\n}\n\n/** represents the information of the current used */\nexport interface AuthInfo {\n  expiration?: Date;\n  user_account: string;\n  user_arn: string;\n  probable_user_mfa_device: string | null; // Null implies it could not be deduced\n  user_id: string;\n}\n\n/** bundles the above two */\nexport interface Auth {\n  creds: AuthCreds;\n  info: AuthInfo;\n  from_mfa: boolean;\n}\n\n/** Fetches the described S3 file using the given creds.\n * Yields the string contents on success\n * Yields the AWS error on failure\n */\nexport async function fetch_s3_file(\n  creds: AuthCreds,\n  file_key: string,\n  bucket_name: string\n): Promise<string> {\n  // Fetch it from s3, and promise to submit it to be loaded afterwards\n  return new S3({ ...creds })\n    .getObject({\n      Key: file_key,\n      Bucket: bucket_name\n    })\n    .promise()\n    .then(success => {\n      let content: string = new TextDecoder(\"utf-8\").decode(\n        success.Body! as Uint8Array\n      );\n      return content;\n    });\n}\n\nexport async function list_buckets(creds: AuthCreds) {\n  return new S3({ ...creds })\n    .listBuckets()\n    .promise()\n    .then(\n      success => {\n        throw \"Not implemented\";\n      },\n      failure => {\n        throw \"Not implemented\";\n      }\n    );\n\n  // */\n}\n\n/** Represents the bundle of parameters required for creating a session key using MFA */\nexport interface MFA_Info {\n  SerialNumber: string | null; // If null, use deduced token\n  TokenCode: string;\n}\n\n/** Attempts to deduce the virtual mfa device serial code from the provided */\nexport function derive_mfa_serial(user_access_token: string): string | null {\n  if (user_access_token) {\n    return user_access_token.replace(\":user\", \":mfa\");\n  } else {\n    return null;\n  }\n}\n\n/** Attempts to retrieve an aws temporary session using the given information.\n * Yields the session info on success.\n * Yields the AWS error on failure.\n */\nexport async function get_session_token(\n  access_token: string,\n  secret_key: string,\n  duration: number,\n  mfa_info?: MFA_Info\n): Promise<Auth> {\n  // Instanciate STS with our base and secret token\n  let sts = new STS({\n    accessKeyId: access_token,\n    secretAccessKey: secret_key\n  });\n\n  // Get the user info\n  let wip_info: Partial<AuthInfo> = {};\n  await sts\n    .getCallerIdentity({})\n    .promise()\n    .then(success => {\n      wip_info.user_account = success.Account!;\n      wip_info.user_arn = success.Arn!;\n      wip_info.user_id = success.UserId;\n      // Guess at mfa\n      wip_info.probable_user_mfa_device = derive_mfa_serial(wip_info.user_arn!);\n    });\n\n  // It's built - mark as such\n  let info = wip_info as AuthInfo;\n\n  // Make our request to be the role\n  let result: Promise<PromiseResult<STS.GetSessionTokenResponse, AWSError>>;\n  if (mfa_info) {\n    mfa_info.SerialNumber =\n      mfa_info.SerialNumber || info.probable_user_mfa_device!; // We cannot get to this stage if\n    result = sts\n      .getSessionToken({\n        DurationSeconds: duration,\n        SerialNumber: mfa_info.SerialNumber,\n        TokenCode: mfa_info.TokenCode\n      })\n      .promise();\n  } else {\n    // Not strictly necessary but why not!\n    result = sts.getSessionToken().promise();\n  }\n\n  // Handle the response. On Success, save the creds. On error, throw that stuff back!\n  return await result.then(success => {\n    let creds: AuthCreds = {\n      accessKeyId: success.Credentials!.AccessKeyId,\n      secretAccessKey: success.Credentials!.SecretAccessKey,\n      sessionToken: success.Credentials!.SessionToken\n    };\n    return {\n      creds,\n      info,\n      from_mfa: !!mfa_info\n    };\n  });\n}\n\n/** Generates human readable versions of common AWS error codes.\n * If the code is not recognized, coughs it back up as an error\n */\nexport function transcribe_error(error: AWSError): string {\n  // Unpack\n  let { code, message } = error;\n\n  // Get what we're supposed to do with it\n  switch (code) {\n    case \"TokenRefreshRequired\":\n    case \"ExpiredToken\":\n      return \"Authorization expired. Please log back in.\";\n    case \"InvalidAccessKeyId\":\n      return \"Provided access key is invalid.\";\n    case \"AccessDenied\":\n      return `Access denied. This likely means that your account does not have access to the specified bucket, or that it requires MFA authentication.`;\n    case \"AccountProblem\":\n      return `Account problem detected: ${message}`;\n    case \"CredentialsNotSupported\":\n      return \"Provided credentials not supported.\";\n    case \"InvalidBucketName\":\n      return \"Invalid bucket name! Please ensure you spelled it correctly.\";\n    case \"NetworkingError\":\n      return \"Networking error. This may be because the provided bucket name does not exist. Please ensure you have spelled it correctly.\";\n    case \"InvalidBucketState\":\n      return \"Invalid bucket state! Contact your AWS administrator.\";\n    case \"ValidationError\":\n      return `Further validation required: ${message}`;\n    case \"SignatureDoesNotMatch\":\n      return \"The provided secret token does not match access token. Please ensure that it is correct.\";\n    case \"InvalidToken\":\n      return \"Your session token has expired. Please log back in and try again.\";\n    case \"InvalidClientTokenId\":\n      return \"The provided access token is invalid. Please ensure that it is correct.\";\n    default:\n      return `Unkown error ${code}. Message: ${message}`;\n  }\n}\n"],"version":3}