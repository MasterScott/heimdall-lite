{"file":"/Users/sjoshi/test/heimdall-lite/src/store/data_store.ts","mappings":"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","names":[],"sources":["/Users/sjoshi/test/heimdall-lite/src/store/data_store.ts"],"sourcesContent":["/**\n * Tracks uploaded files, and their parsed contents\n */\n\nimport { Module, VuexModule, Mutation, Action } from \"vuex-module-decorators\";\nimport {\n  HDFControl,\n  parse,\n  schemas_1_0,\n  hdfWrapControl,\n  ControlStatus,\n  context\n} from \"inspecjs\";\nimport { FileID, EvaluationFile, ProfileFile } from \"@/store/report_intake\";\nimport Store from \"@/store/store\";\n\n/** We make some new variant types of the Contextual types, to include their files*/\nexport interface SourcedContextualizedProfile\n  extends context.ContextualizedProfile {\n  from_file: ProfileFile;\n}\n\nexport function isFromProfileFile(\n  p: context.ContextualizedProfile\n): p is SourcedContextualizedProfile {\n  return p.sourced_from === null;\n}\n\nexport interface SourcedContextualizedEvaluation\n  extends context.ContextualizedEvaluation {\n  from_file: EvaluationFile;\n}\n\n@Module({\n  namespaced: true,\n  dynamic: true,\n  store: Store,\n  name: \"data\"\n})\nclass InspecDataModule extends VuexModule {\n  /** State var containing all execution files that have been added */\n  executionFiles: EvaluationFile[] = [];\n\n  /** State var containing all profile files that have been added */\n  profileFiles: ProfileFile[] = [];\n\n  /** Return all of the files that we currently have. */\n  get allFiles(): (EvaluationFile | ProfileFile)[] {\n    let result: (EvaluationFile | ProfileFile)[] = [];\n    result.push(...this.executionFiles);\n    result.push(...this.profileFiles);\n    return result;\n  }\n\n  /**\n   * Recompute all contextual data\n   */\n  get contextStore(): [\n    readonly SourcedContextualizedEvaluation[],\n    readonly context.ContextualizedProfile[],\n    readonly context.ContextualizedControl[]\n  ] {\n    // Initialize all our arrays\n    let executions: SourcedContextualizedEvaluation[] = [];\n    let profiles: context.ContextualizedProfile[] = [];\n    let controls: context.ContextualizedControl[] = [];\n\n    // Process our data\n    for (let f of this.executionFiles) {\n      let fc = context.contextualizeEvaluation(f.execution);\n      let sfc = (fc as unknown) as SourcedContextualizedEvaluation;\n      sfc.from_file = f;\n      executions.push(Object.freeze(sfc));\n      profiles.push(...fc.contains);\n    }\n\n    for (let f of this.profileFiles) {\n      let fc = context.contextualizeProfile(f.profile);\n      let sfc = (fc as unknown) as SourcedContextualizedProfile;\n      sfc.from_file = f;\n      profiles.push(Object.freeze(sfc));\n    }\n\n    for (let p of profiles) {\n      controls.push(...p.contains);\n    }\n\n    return [executions, profiles, controls];\n  }\n\n  /**\n   * Returns a readonly list of all executions currently held in the data store\n   * including associated context\n   */\n  get contextualExecutions(): readonly SourcedContextualizedEvaluation[] {\n    return this.contextStore[0];\n  }\n\n  /**\n   * Returns a readonly list of all profiles currently held in the data store\n   * including associated context\n   */\n  get contextualProfiles(): readonly context.ContextualizedProfile[] {\n    return this.contextStore[1];\n  }\n\n  /**\n   * Returns a readonly list of all controls currently held in the data store\n   * including associated context\n   */\n  get contextualControls(): readonly context.ContextualizedControl[] {\n    return this.contextStore[2];\n  }\n\n  /**\n   * Adds a profile file to the store.\n   * @param newProfile The profile to add\n   */\n  @Mutation\n  addProfile(newProfile: ProfileFile) {\n    this.profileFiles.push(newProfile);\n  }\n\n  /**\n   * Adds an execution file to the store.\n   * @param newExecution The execution to add\n   */\n  @Mutation\n  addExecution(newExecution: EvaluationFile) {\n    this.executionFiles.push(newExecution);\n  }\n\n  /**\n   * Unloads the file with the given id\n   */\n  @Mutation\n  removeFile(file_id: FileID) {\n    this.profileFiles = this.profileFiles.filter(\n      pf => pf.unique_id !== file_id\n    );\n    this.executionFiles = this.executionFiles.filter(\n      ef => ef.unique_id !== file_id\n    );\n  }\n\n  /**\n   * Clear all stored data.\n   */\n  @Mutation\n  reset() {\n    this.profileFiles = [];\n    this.executionFiles = [];\n  }\n}\n\nexport default InspecDataModule;\n"],"version":3}