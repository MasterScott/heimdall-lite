{"file":"/Users/sjoshi/test/heimdall-lite/tests/unit/parsing_and_counting.spec.ts","mappings":"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","names":[],"sources":["/Users/sjoshi/test/heimdall-lite/tests/unit/parsing_and_counting.spec.ts"],"sourcesContent":["import chai from \"chai\";\nimport chai_as_promised from \"chai-as-promised\";\nchai.use(chai_as_promised);\nconst expect = chai.expect;\n\nimport Store from \"../../src/store/store\";\nimport ReportIntakeModule from \"../../src/store/report_intake\";\nimport DataStore from \"../../src/store/data_store\";\nimport { getModule } from \"vuex-module-decorators\";\nimport { AllRaw } from \"../util/fs\";\nimport FilteredDataModule from \"@/store/data_filters\";\nimport StatusCountModule, { StatusHash } from \"@/store/status_counts\";\nimport { readFileSync } from \"fs\";\n// import { shallowMount } from \"@vue/test-utils\";\n\ndescribe(\"Parsing\", () => {\n  it(\"Report intake can read every raw file in hdf_data\", function() {\n    // Give it time!\n    jest.setTimeout(0);\n    let raw = AllRaw();\n    let intake = getModule(ReportIntakeModule, Store);\n    let id = 0;\n\n    let promises = Object.values(raw).map(file_result => {\n      // Increment counter\n      id += 1;\n\n      // Do intake\n      return intake.loadText({\n        filename: file_result.name,\n        unique_id: id,\n        text: file_result.content\n      });\n    });\n\n    // Done!\n    return Promise.all(promises.map(p => expect(p).to.eventually.be.null));\n  });\n\n  // Note that the above side effect has LOADED THESE FILES! WE CAN USE THEM IN OTHER TESTS\n\n  it(\"Counts statuses correctly\", function() {\n    // Grab modules\n    let data = getModule(DataStore, Store);\n    let filter = getModule(FilteredDataModule, Store);\n    let status_count = getModule(StatusCountModule, Store);\n\n    // Get the exec files\n    let exec_files = data.executionFiles;\n\n    // For each, we will filter then count\n    exec_files.forEach(file => {\n      // Get the corresponding count file\n      let count_filename = `tests/hdf_data/counts/${file.filename}.info.counts`;\n      let count_file_content = readFileSync(count_filename, \"utf-8\");\n      let counts: any = JSON.parse(count_file_content);\n\n      // Get the expected counts\n      let expected: StatusHash = {\n        Failed: counts.failed.total,\n        Passed: counts.passed.total,\n        \"From Profile\": 0,\n        \"Profile Error\": counts.error.total,\n        \"Not Reviewed\": counts.skipped.total,\n        \"Not Applicable\": counts.no_impact.total\n      };\n\n      let expected_with_filename = {\n        filename: file.filename,\n        ...expected\n      };\n\n      // Get the actual\n      let actual = status_count.hash({\n        omit_overlayed_controls: true,\n        fromFile: file.unique_id\n      });\n\n      let actual_with_filename = {\n        filename: file.filename,\n        ...actual\n      };\n\n      // Compare 'em\n      expect(actual_with_filename).to.eql(expected_with_filename);\n    });\n  });\n});\n"],"version":3}