{"file":"/Users/sjoshi/test/heimdall-lite/src/utilities/async_util.ts","mappings":";AAAA,iEAAiE;;AAEjE,iEAAiE;AAC1D,KAAK,UAAU,eAAe,CAAC,IAAU;IAC9C,MAAM,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;IAChC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACrC,MAAM,CAAC,OAAO,GAAG,GAAG,EAAE;YACpB,MAAM,CAAC,KAAK,EAAE,CAAC;YACf,MAAM,CAAC,IAAI,YAAY,CAAC,6BAA6B,CAAC,CAAC,CAAC;QAC1D,CAAC,CAAC;QAEF,MAAM,CAAC,MAAM,GAAG,GAAG,EAAE;YACnB,IAAI,MAAM,CAAC,MAAM,KAAK,IAAI,IAAI,MAAM,CAAC,MAAM,KAAK,SAAS,EAAE;gBACzD,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;aACnC;iBAAM;gBACL,MAAM,CAAC,IAAI,YAAY,CAAC,6BAA6B,CAAC,CAAC,CAAC;aACzD;QACH,CAAC,CAAC;QACF,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,CAAC;AACL,CAAC;AAjBD,0CAiBC;AAED;;GAEG;AACH,SAAgB,OAAO,CAAI,CAAuB;IAChD,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,SAAS,EAAE;QACjC,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;KACrD;SAAM;QACL,OAAO,CAAC,CAAC;KACV;AACH,CAAC;AAND,0BAMC;AAED,2CAA2C;AAC3C,SAAgB,KAAK,CAAC,EAAU;IAC9B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;AACzD,CAAC;AAFD,sBAEC","names":[],"sources":["/Users/sjoshi/test/heimdall-lite/src/utilities/async_util.ts"],"sourcesContent":["/* Provides async wrappers over various common functions/tasks */\n\n/** Provides the resulting text of reading a file as a promise */\nexport async function read_file_async(file: File): Promise<string> {\n  const reader = new FileReader();\n  return new Promise((resolve, reject) => {\n    reader.onerror = () => {\n      reader.abort();\n      reject(new DOMException(\"Problem parsing input file.\"));\n    };\n\n    reader.onload = () => {\n      if (reader.result !== null && reader.result !== undefined) {\n        resolve(reader.result.toString());\n      } else {\n        reject(new DOMException(\"Problem parsing input file.\"));\n      }\n    };\n    reader.readAsText(file);\n  });\n}\n\n/** Checks that a value is not null or undefined at a singular point.\n * Provides easy tracking of where data constraints aren't satisfied.\n */\nexport function defined<T>(x: T | null | undefined): T {\n  if (x === null || x === undefined) {\n    throw new Error(\"Value must not be null/undefined\");\n  } else {\n    return x;\n  }\n}\n\n/** Sleeps for a given # of milliseconds */\nexport function delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n"],"version":3}