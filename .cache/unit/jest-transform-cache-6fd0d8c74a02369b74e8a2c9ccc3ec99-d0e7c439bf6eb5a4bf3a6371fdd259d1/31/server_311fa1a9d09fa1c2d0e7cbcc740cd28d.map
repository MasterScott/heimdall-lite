{"file":"/Users/sjoshi/test/heimdall-lite/src/store/server.ts","mappings":"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","names":[],"sources":["/Users/sjoshi/test/heimdall-lite/src/store/server.ts"],"sourcesContent":["import {\n  Module,\n  VuexModule,\n  getModule,\n  Mutation,\n  Action\n} from \"vuex-module-decorators\";\nimport Store from \"@/store/store\";\nimport { LocalStorageVal } from \"@/utilities/helper_util\";\nimport axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { plainToClass } from \"class-transformer\";\nimport { EvaluationFile, ProfileFile, FileID } from \"@/store/report_intake\";\n\nexport interface LoginHash {\n  username: string;\n  password: string;\n}\n/** The body of a registration Request */\n//\"id\":1,\"first_name\":null,\"last_name\":null,\"email\":\"email@gmail.com\",\"image\":null,\"phone_number\":null,\"createdAt\":\"2020-03-23T15:57:33.044Z\",\"updatedAt\":\"2020-03-23T15:57:33.044Z\"}\nexport class UserProfile {\n  id!: number;\n  first_name!: string;\n  last_name!: string;\n  email!: string;\n  image!: string;\n  phone_number!: string;\n  createdAt!: Date;\n  updatedAt!: Date;\n}\n\nconst local_token = new LocalStorageVal<string | null>(\"auth_token\");\nconst local_user = new LocalStorageVal<UserProfile | null>(\"user_profile\");\nconst local_user_evaluations = new LocalStorageVal<string | null>(\n  \"user_evaluations\"\n);\nconst local_evaluation = new LocalStorageVal<string | null>(\"evaluation\");\n\ntype ConnErrorType =\n  | \"NO_CONNECTION\"\n  | \"BAD_CONNECTION\"\n  | \"BAD_LOGIN\"\n  | \"UNAUTHORIZED\"\n  | \"BAD_RESPONSE\"\n  | \"UNKNOWN\";\nexport class ConnectionError extends Error {\n  constructor(readonly type: ConnErrorType, readonly message: string) {\n    super(`${type} - ${message}`);\n  }\n}\n\nexport class HSConnectionConfig {\n  constructor(readonly url: string) {}\n\n  /** Checks whether the connection works. If it succeeds, then assume all is well */\n  async check(): Promise<void> {\n    return fetch(this.url, { method: \"get\" })\n      .then(response => response.text())\n      .then(text => {\n        if (text != \"HS_ALIVE\") {\n          throw new ConnectionError(\"BAD_CONNECTION\", \"Connection failed\");\n        }\n      });\n  }\n}\n\n@Module({\n  namespaced: true,\n  dynamic: true,\n  store: Store,\n  name: \"heimdallServer\"\n})\nclass HeimdallServerModule extends VuexModule {\n  /** Our current target server parameters */\n  connection: HSConnectionConfig | null = null;\n  serverMode: boolean | null = null;\n  serverUrl: string = \"\";\n  @Mutation\n  set_connection(new_url: string) {\n    this.connection = new HSConnectionConfig(new_url);\n  }\n\n  @Action\n  async connect(new_url: string): Promise<void> {\n    console.log(\"connected :\" + new_url);\n    this.set_connection(new_url);\n  }\n\n  /** Our currently granted JWT token */\n  token: string | null = local_token.get();\n  profile: UserProfile | null = local_user.get();\n  user_evaluations: string | null = local_user_evaluations.get();\n  evaluation: string | null = local_evaluation.get();\n\n  /** Mutation to set above, as well as to update our localstorage */\n  @Mutation\n  set_token(new_token: string | null) {\n    this.token = new_token;\n    console.log(\"server.ts - set token: \" + this.token);\n    local_token.set(new_token);\n  }\n  @Mutation\n  mod_server_url(value: string) {\n    this.serverUrl = value;\n  }\n\n  @Mutation\n  mod_server_mode(value: boolean) {\n    this.serverMode = value;\n  }\n\n  @Action\n  server_mode() {\n    let url = window.location.origin + \"/api\";\n    console.log(url);\n    /*This will check if api is available */\n    if (process.env.VUE_APP_API_URL) {\n      this.mod_server_url(process.env.VUE_APP_API_URL); // this.serverUrl = process.env.VUE_APP_API_URL;\n      this.mod_server_mode(true);\n    } else {\n      axios\n        .get(url, {\n          validateStatus: function(status) {\n            return status < 500; // Reject only if the status code is greater than or equal to 500\n          }\n        })\n        .then(res => {\n          console.log(\"test\");\n          if (res.status == 200) {\n            this.mod_server_mode(true); //window.location.href;\n            this.mod_server_url(url); // = true;\n          } else {\n            this.mod_server_mode(false);\n          }\n        })\n        .catch(error => {\n          console.log(\"caught error\");\n          this.mod_server_mode(false);\n        });\n    }\n  }\n\n  @Mutation\n  set_server_url(url: string) {\n    this.serverUrl = url;\n  }\n\n  /** Mutation to set above, as well as to update our localstorage */\n  @Mutation\n  set_evaluation(evaluation: string | null) {\n    this.evaluation = evaluation;\n    console.log(\"server.ts - set evaluation: \" + this.evaluation);\n    local_evaluation.set(evaluation);\n  }\n\n  /* Actions to authorize and set token */\n  @Action\n  clear_token() {\n    this.set_token(null);\n    this.set_user_profile(null);\n    this.set_user_evaluations(null);\n  }\n\n  /** Mutation to set user_profile, as well as to update our localstorage */\n  @Mutation\n  set_user_profile(new_user: string | null) {\n    if (new_user) {\n      this.profile = plainToClass(UserProfile, new_user);\n    } else {\n      this.profile = null;\n    }\n    console.log(\"server.ts - set user: \" + this.profile);\n    local_user.set(this.profile);\n  }\n\n  /** Mutation to set user_profile, as well as to update our localstorage */\n  @Mutation\n  set_user_evaluations(evals: string | null) {\n    if (evals) {\n      this.user_evaluations = evals;\n    } else {\n      this.user_evaluations = null;\n    }\n    console.log(\"server.ts - set user_evaluations: \" + this.user_evaluations);\n    local_user_evaluations.set(this.user_evaluations);\n  }\n\n  /** Attempts to login to the server */\n  @Action\n  async login(creds: LoginHash): Promise<void> {\n    console.log(\n      \"Logging in to \" +\n        this.connection!.url +\n        \"/auth/login\" +\n        \" with \" +\n        creds[\"username\"] +\n        \"/\" +\n        creds[\"password\"]\n    );\n    //this.requires_connection();\n    console.log(\"has connection\");\n    //curl -X POST http://localhost:8050/auth/login -d '{\"username\": \"blah\", \"password\": \"blaah\"}' -H \"Content-Type: application/json\"\n    return fetch(this.connection!.url + \"/auth/login\", {\n      body: `{\"username\": \"${creds[\"username\"]}\", \"password\": \"${creds[\"password\"]}\"}`,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\"\n    })\n      .then(this.check_code)\n      .then(res => res.json())\n      .then((v: any) => {\n        if (typeof v === \"object\") {\n          this.set_token(v.access_token);\n          console.log(\"got token\" + v.access_token);\n          this.retrieve_profile();\n          this.retrieve_personal_evaluations();\n        } else {\n          console.error(\n            `Something went wrong: Got ${v.access_token} for login response`\n          );\n          throw new ConnectionError(\n            \"BAD_RESPONSE\",\n            \"Got unrecognized login response\"\n          );\n        }\n      });\n  }\n\n  /** Attempts to login to the server */\n  @Action\n  async register(creds: LoginHash): Promise<void> {\n    console.log(\n      \"Registering to \" +\n        this.connection!.url +\n        \"/auth/register\" +\n        \" with \" +\n        creds[\"username\"] +\n        \"/\" +\n        creds[\"password\"]\n    );\n    //curl -X POST http://localhost:8050/auth/register -d '{\"email\": \"blah@gmail.com\", \"password\": \"blaah\"}' -H \"Content-Type: application/json\"\n    return (\n      fetch(this.connection!.url + \"/auth/register\", {\n        body: `{\"email\": \"${creds[\"username\"]}\", \"password\": \"${creds[\"password\"]}\"}`,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"POST\"\n      })\n        //.then(this.check_code)\n        //.then(res => res.json())\n        .then((v: Response) => {\n          if (v.ok) {\n            console.log(\"registration returned \" + v.ok);\n          } else {\n            console.error(\n              `Something went wrong: Got ${JSON.stringify(\n                v\n              )} for register response`\n            );\n            throw new ConnectionError(\n              \"BAD_RESPONSE\",\n              \"Got unrecognized register response\"\n            );\n          }\n        })\n    );\n  }\n\n  /** Attempts to login to the server */\n  @Action\n  async retrieve_profile(): Promise<void> {\n    console.log(\"Getting \" + this.connection!.url + \"/auth/profile\");\n    //curl http://localhost:8050/auth/profile -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2Vybm...\"\n    return axios\n      .get(this.connection!.url + \"/auth/profile\", {\n        headers: {\n          Authorization: `Bearer ${this.token}`\n        }\n      })\n      .then((v: any) => {\n        this.set_user_profile(v.data);\n      });\n  }\n\n  /** Attempts to save evaluation to the database */\n  @Action\n  async save_evaluation(evaluation: EvaluationFile): Promise<void> {\n    console.log(\n      \"Saving execution to \" + this.connection!.url + \"/executions/upload\"\n    );\n    const options = {\n      headers: {\n        Authorization: `Bearer ${this.token}`\n      }\n    };\n    return axios\n      .post(\n        this.connection!.url + \"/executions/upload\",\n        {\n          evaluation: evaluation.execution,\n          filename: evaluation.filename\n        },\n        options\n      )\n      .then((v: any) => {\n        console.log(\"saved\");\n      });\n  }\n\n  /** Attempts to retrieve a list of personal evaluations */\n  @Action\n  async retrieve_personal_evaluations(): Promise<void> {\n    console.log(\"Getting \" + this.connection!.url + \"/executions/personal\");\n    //curl http://localhost:8050/executions/personal -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2Vybm...\"\n    return axios\n      .get(this.connection!.url + \"/executions/personal\", {\n        headers: {\n          Authorization: `Bearer ${this.token}`\n        }\n      })\n      .then((v: any) => {\n        console.log(\"personal evals: \" + JSON.stringify(v.data));\n        this.set_user_evaluations(v.data);\n      });\n  }\n\n  /** Attempts to retrieve a list of personal evaluations */\n  @Action\n  async retrieve_evaluation(file_id: FileID): Promise<void> {\n    console.log(\n      \"Getting \" + this.connection!.url + \"/executions/fetch/\" + file_id\n    );\n    //curl http://localhost:8050/executions/personal -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2Vybm...\"\n    return axios\n      .get(this.connection!.url + \"/executions/fetch/\" + file_id, {\n        headers: {\n          Authorization: `Bearer ${this.token}`\n        }\n      })\n      .then((v: any) => {\n        console.log(\"got evaluation: \" + JSON.stringify(v.data));\n        this.set_evaluation(v.data);\n      });\n  }\n\n  /** Our supposed role */\n  // TODO:\n\n  private async check_code(res: Response): Promise<Response> {\n    // if ok, pass\n    console.log(\"check_code res.ok: \" + res.ok);\n    if (res.ok) {\n      console.log(\"check_code res.status: \" + res.status);\n      console.log(\"check_code res.body: \" + res.body);\n      return res;\n    }\n\n    switch (res.status) {\n      case 401:\n        throw new ConnectionError(\"UNAUTHORIZED\", res.statusText);\n      default:\n        throw new ConnectionError(\"UNKNOWN\", res.statusText);\n    }\n  }\n}\n\nexport default HeimdallServerModule;\n"],"version":3}