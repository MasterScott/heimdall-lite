{"version":3,"sources":["FileList.vue"],"names":[],"mappings":";;;;;;;;;AAgDA;;;;AACA;;;;AACA;;AAEA;;;;AAKA;;AAKA;;;;AAEA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;;;;;;;;;AAUA;;AACA;;AAGA;AACA;AACA;AACA;AACA;AAHA;AADA;;AAWA;AAAA;;AACA;;AACA;AA0DA;AAxDA;;;AACA;AACA;AACA;AAEA;;;AACA;AACA;AACA;AACA;;AACA;AACA;AAEA;;AACA;;;;;AAGA;AACA;AACA;;AAGA;AACA;;AAGA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AAGA;AAEA;;;AACA;AACA;AACA;AAEA;;;AACA;AACA;AACA;AACA;AAEA;;;;;AAGA;AACA;AACA;AACA;;AA3DA;AAAA;AAFA;AADA","sourcesContent":["<template>\n  <v-stepper-content step=\"3\">\n    <div class=\"d-flex flex-column\">\n      <div class=\"d-flex justify-space-between\">\n        <v-text-field\n          v-model=\"form_bucket_name\"\n          label=\"Bucket name\"\n          @keyup.enter=\"load\"\n        />\n        <v-btn\n          title=\"Load\"\n          @click=\"load\"\n          :disabled=\"form_bucket_name.length < 1\"\n          class=\"fill-height pa-0\"\n        >\n          <v-icon>mdi-cloud-download</v-icon>\n        </v-btn>\n      </div>\n\n      <v-list :two-line=\"true\">\n        <v-list-item v-if=\"files.length === 0\"\n          >No items found! Try different terms?</v-list-item\n        >\n        <v-list-item v-for=\"(val, index) in files\" :key=\"val.Key\">\n          <v-list-item-content>\n            <!-- Title: The item key -->\n            <v-list-item-title>{{ val.Key }}</v-list-item-title>\n            <!-- Subtitle: Date of creation -->\n            <v-list-item-subtitle>\n              {{ val.LastModified }}\n            </v-list-item-subtitle>\n          </v-list-item-content>\n          <!-- Action: Click to add -->\n          <v-list-item-action>\n            <v-btn icon @click=\"load_file(index)\">\n              <v-icon>mdi-plus-circle</v-icon>\n            </v-btn>\n          </v-list-item-action>\n        </v-list-item>\n      </v-list>\n      <v-btn color=\"red\" @click=\"$emit('exit-list')\" class=\"my-2 mr-3\">\n        Cancel\n      </v-btn>\n    </div>\n  </v-stepper-content>\n</template>\n\n<script lang=\"ts\">\nimport Vue from \"vue\";\nimport Component from \"vue-class-component\";\nimport { getModule } from \"vuex-module-decorators\";\nimport S3, { ObjectKey } from \"aws-sdk/clients/s3\";\nimport InspecIntakeModule, {\n  FileID,\n  next_free_file_ID\n} from \"@/store/report_intake\";\nimport { AWSError } from \"aws-sdk/lib/error\";\nimport {\n  Auth,\n  fetch_s3_file,\n  transcribe_error\n} from \"../../../../utilities/aws_util\";\nimport { LocalStorageVal } from \"../../../../utilities/helper_util\";\n\nconst HEADERS: any = [\n  {\n    text: \"Filename\",\n    align: \"left\",\n    sortable: false,\n    value: \"name\"\n  },\n  { text: \"Last Modified\", value: \"LastModified\" },\n  { text: \"Size\", value: \"Size\" }\n];\n\n/*\n  export interface S3.Object {\n    Key?: ObjectKey;\n    LastModified?: LastModified;\n    ETag?: ETag;\n    Size?: Size;\n    StorageClass?: ObjectStorageClass;\n    Owner?: Owner;\n  } */\n\n// Caches the bucket name\nconst local_bucket_name = new LocalStorageVal<string>(\"aws_bucket_name\");\n\n// We declare the props separately to make props types inferable.\nconst Props = Vue.extend({\n  props: {\n    auth: Object, // Can be null, but shouldn't be!\n    files: Array, // List of S3 objects of current files\n    error: String\n  }\n});\n\n@Component({\n  components: {}\n})\nexport default class FileList extends Props {\n  /** The name written in the form */\n  form_bucket_name: string = \"\";\n\n  /** Currently visible files */\n  get _files(): S3.Object[] {\n    return this.files as S3.Object[];\n  }\n\n  /** Typed getter for auth */\n  get _auth(): Auth {\n    if (this.auth === null) {\n      throw new Error(\"We aren't auth'd\");\n    }\n    return this.auth as Auth;\n  }\n\n  /** On mount, try to look up stored auth info */\n  /** Callback for when user selects a file.\n   * Loads it into our system.\n   */\n  async load_file(index: number): Promise<void> {\n    // Get it out of the list\n    let file = this._files[index];\n\n    // Generate file id for it, and prep module for load\n    let unique_id = next_free_file_ID();\n    let intake_module = getModule(InspecIntakeModule, this.$store);\n\n    // Fetch it from s3, and promise to submit it to be loaded afterwards\n    await fetch_s3_file(this._auth.creds, file.Key!, this.form_bucket_name)\n      .then(content => {\n        return intake_module.loadText({\n          text: content,\n          filename: file.Key!,\n          unique_id\n        });\n      })\n      .then(() => this.$emit(\"got-files\", [unique_id]))\n      .catch((failure: any) => this.handle_error(failure));\n  }\n\n  /** Recalls the last entered bucket name.  */\n  mounted() {\n    this.form_bucket_name = local_bucket_name.get_default(\"\");\n  }\n\n  /** Handles when load button clicked */\n  load() {\n    local_bucket_name.set(this.form_bucket_name);\n    this.$emit(\"load-bucket\", this.form_bucket_name);\n  }\n\n  /** Callback to handle an AWS error.\n   * Sets shown error.\n   */\n  handle_error(error: any): void {\n    let t_error = error as AWSError;\n    console.error(\"We should re-emit this in an appropriate place\");\n  }\n}\n</script>\n"]}