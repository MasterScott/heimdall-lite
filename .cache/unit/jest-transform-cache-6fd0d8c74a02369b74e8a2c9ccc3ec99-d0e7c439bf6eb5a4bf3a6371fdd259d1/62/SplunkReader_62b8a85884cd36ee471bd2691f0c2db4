8f73d4f318451e409c43856e8bdb887b
;(function(){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _tslib = require("tslib");

var _vue = require("vue");

var _vue2 = _interopRequireDefault(_vue);

var _vueClassComponent = require("vue-class-component");

var _vueClassComponent2 = _interopRequireDefault(_vueClassComponent);

var _AuthStep = require("./AuthStep.vue");

var _AuthStep2 = _interopRequireDefault(_AuthStep);

var _FileList = require("./FileList.vue");

var _FileList2 = _interopRequireDefault(_FileList);

var _splunk_util = require("../../../../utilities/splunk_util");

var _ErrorTooltip = require("../../../generic/ErrorTooltip.vue");

var _ErrorTooltip2 = _interopRequireDefault(_ErrorTooltip);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// We declare the props separately to make props types inferable.
const Props = _vue2.default.extend({
  props: {}
});
/**
 * File reader component for taking in inspec JSON data.
 * Uploads data to the store with unique IDs asynchronously as soon as data is entered.
 * Emits "got-files" with a list of the unique_ids of the loaded files.
 */


let SplunkReader = class SplunkReader extends Props {
  constructor() {
    super(...arguments);
    /** Our session information, saved iff valid */

    this.splunk_state = null;
    /** Current step. 1 for login, 2 for search */

    this.step = 1;
    /** Count errors to know if we should show overlay */

    this.error_count = 0;
  }
  /** When login is clicked - save credentials, verify that they work, then proceed if they do*/


  handle_login(new_endpoint) {
    // Store the state
    this.splunk_state = new_endpoint; // Move the carousel

    this.step = 2;
  }
  /** When cancel/logoutis clicked from the search window */


  handle_logout() {
    this.step = 1;
    this.splunk_state = null;
  }
  /** Callback to handle a splunk error.
   * Sets shown error.
   */


  handle_error(error) {
    switch (error) {
      case _splunk_util.SplunkErrorCode.BadNetwork:
        this.error_count += 1; // https://docs.splunk.com/Documentation/Splunk/8.0.1/Admin/Serverconf

        this.show_error_message("Connection to host failed. Please ensure that the hostname is correct, and that your splunk server has been properly configured to allow CORS requests. Please see https://docs.splunk.com/Documentation/Splunk/8.0.1/Admin/Serverconf for information on how to enable CORS.");
        break;

      case _splunk_util.SplunkErrorCode.PageNotFound:
        this.error_count += 1;
        this.show_error_message("Connection made with errors. Please ensure your hostname is formatted as shown in the example.");
        break;

      case _splunk_util.SplunkErrorCode.BadAuth:
        this.show_error_message("Bad username or password.");
        break;

      case _splunk_util.SplunkErrorCode.SearchFailed:
        this.show_error_message("Internal splunk error while searching");
        break;

      case _splunk_util.SplunkErrorCode.ConsolidationFailed:
      case _splunk_util.SplunkErrorCode.SchemaViolation:
        this.error_count += 1;
        this.show_error_message("Error creating execution from splunk events.");
        break;

      case _splunk_util.SplunkErrorCode.InvalidGUID:
        this.show_error_message("Duplicate execution GUID detected. The odds of this happening should be astronomically low. Please file a bug report.");
        break;

      case _splunk_util.SplunkErrorCode.BadUrl:
        this.show_error_message("Invalid URL. Please ensure you have typed it correctly.");
        break;

      case _splunk_util.SplunkErrorCode.UnknownError:
        this.show_error_message("Something went wrong, but we're not sure what. Please file a bug report.");
        break;
    }
  }
  /** Give our error tooltip the message */


  show_error_message(msg) {
    let tt = this.$refs["error_tooltip"];
    tt.show_error(msg);
  }
  /** Callback on got files */


  got_files(files) {
    this.$emit("got-files", files);
  }

};
SplunkReader = (0, _tslib.__decorate)([(0, _vueClassComponent2.default)({
  components: {
    AuthStep: _AuthStep2.default,
    FileList: _FileList2.default,
    ErrorTooltip: _ErrorTooltip2.default
  }
})], SplunkReader);
exports.default = SplunkReader; //# sourceMappingURL=module.jsx.map
})()
var defaultExport = (module.exports.__esModule) ? module.exports.default : module.exports;var __vue__options__ = (typeof defaultExport === "function"? defaultExport.options: defaultExport)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ErrorTooltip',{ref:"error_tooltip"},[_c('v-stepper',{staticClass:"elevation-0",attrs:{"vertical":""},model:{value:(_vm.step),callback:function ($$v) {_vm.step=$$v},expression:"step"}},[_c('v-stepper-step',{attrs:{"step":"1"}},[_vm._v("\n      Login Credentials\n    ")]),_vm._v(" "),_c('v-stepper-step',{attrs:{"step":"2"}},[_vm._v("\n      Search Execution Events\n    ")]),_vm._v(" "),_c('AuthStep',{on:{"authenticated":_vm.handle_login,"error":_vm.handle_error,"show-help":function($event){_vm.error_count = -1}}}),_vm._v(" "),_c('FileList',{attrs:{"endpoint":_vm.splunk_state},on:{"exit-list":_vm.handle_logout,"got-files":_vm.got_files,"error":_vm.handle_error}}),_vm._v(" "),_c('v-overlay',{attrs:{"opacity":50,"absolute":"absolute","value":_vm.error_count >= 3 || _vm.error_count < 0}},[_c('div',{staticClass:"text-center"},[_c('p',[(_vm.error_count > 0)?_c('span',[_vm._v("\n            It seems you may be having trouble using the Splunk toolkit. Are\n            you sure that you have configured it properly?\n          ")]):_vm._e(),_vm._v(" "),_c('br'),_vm._v(" "),_c('span',[_vm._v("\n            For installation instructions and further information, check here:\n          ")]),_vm._v(" "),_c('v-btn',{attrs:{"target":"_blank","href":"https://github.com/mitre/hdf-json-to-splunk/","text":"","color":"info","px-0":""}},[_c('v-icon',{attrs:{"pr-2":""}},[_vm._v("mdi-github-circle")]),_vm._v("\n            Splunk HDF Plugin\n          ")],1)],1),_vm._v(" "),_c('v-btn',{attrs:{"color":"info"},on:{"click":function($event){_vm.error_count = 0}}},[_vm._v("\n          Ok\n        ")])],1)])],1)],1)}
__vue__options__.staticRenderFns = []
