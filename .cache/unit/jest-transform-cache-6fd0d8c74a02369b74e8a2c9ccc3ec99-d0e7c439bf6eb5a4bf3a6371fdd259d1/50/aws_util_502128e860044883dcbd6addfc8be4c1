49a35bec160aa8e2d7dae1dd8835d839
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const sts_1 = tslib_1.__importDefault(require("aws-sdk/clients/sts"));
const s3_1 = tslib_1.__importDefault(require("aws-sdk/clients/s3"));
exports.AUTH_DURATION = 8 * 60 * 60; // 8 hours
/** Fetches the described S3 file using the given creds.
 * Yields the string contents on success
 * Yields the AWS error on failure
 */
async function fetch_s3_file(creds, file_key, bucket_name) {
    // Fetch it from s3, and promise to submit it to be loaded afterwards
    return new s3_1.default({ ...creds })
        .getObject({
        Key: file_key,
        Bucket: bucket_name
    })
        .promise()
        .then(success => {
        let content = new TextDecoder("utf-8").decode(success.Body);
        return content;
    });
}
exports.fetch_s3_file = fetch_s3_file;
async function list_buckets(creds) {
    return new s3_1.default({ ...creds })
        .listBuckets()
        .promise()
        .then(success => {
        throw "Not implemented";
    }, failure => {
        throw "Not implemented";
    });
    // */
}
exports.list_buckets = list_buckets;
/** Attempts to deduce the virtual mfa device serial code from the provided */
function derive_mfa_serial(user_access_token) {
    if (user_access_token) {
        return user_access_token.replace(":user", ":mfa");
    }
    else {
        return null;
    }
}
exports.derive_mfa_serial = derive_mfa_serial;
/** Attempts to retrieve an aws temporary session using the given information.
 * Yields the session info on success.
 * Yields the AWS error on failure.
 */
async function get_session_token(access_token, secret_key, duration, mfa_info) {
    // Instanciate STS with our base and secret token
    let sts = new sts_1.default({
        accessKeyId: access_token,
        secretAccessKey: secret_key
    });
    // Get the user info
    let wip_info = {};
    await sts
        .getCallerIdentity({})
        .promise()
        .then(success => {
        wip_info.user_account = success.Account;
        wip_info.user_arn = success.Arn;
        wip_info.user_id = success.UserId;
        // Guess at mfa
        wip_info.probable_user_mfa_device = derive_mfa_serial(wip_info.user_arn);
    });
    // It's built - mark as such
    let info = wip_info;
    // Make our request to be the role
    let result;
    if (mfa_info) {
        mfa_info.SerialNumber =
            mfa_info.SerialNumber || info.probable_user_mfa_device; // We cannot get to this stage if
        result = sts
            .getSessionToken({
            DurationSeconds: duration,
            SerialNumber: mfa_info.SerialNumber,
            TokenCode: mfa_info.TokenCode
        })
            .promise();
    }
    else {
        // Not strictly necessary but why not!
        result = sts.getSessionToken().promise();
    }
    // Handle the response. On Success, save the creds. On error, throw that stuff back!
    return await result.then(success => {
        let creds = {
            accessKeyId: success.Credentials.AccessKeyId,
            secretAccessKey: success.Credentials.SecretAccessKey,
            sessionToken: success.Credentials.SessionToken
        };
        return {
            creds,
            info,
            from_mfa: !!mfa_info
        };
    });
}
exports.get_session_token = get_session_token;
/** Generates human readable versions of common AWS error codes.
 * If the code is not recognized, coughs it back up as an error
 */
function transcribe_error(error) {
    // Unpack
    let { code, message } = error;
    // Get what we're supposed to do with it
    switch (code) {
        case "TokenRefreshRequired":
        case "ExpiredToken":
            return "Authorization expired. Please log back in.";
        case "InvalidAccessKeyId":
            return "Provided access key is invalid.";
        case "AccessDenied":
            return `Access denied. This likely means that your account does not have access to the specified bucket, or that it requires MFA authentication.`;
        case "AccountProblem":
            return `Account problem detected: ${message}`;
        case "CredentialsNotSupported":
            return "Provided credentials not supported.";
        case "InvalidBucketName":
            return "Invalid bucket name! Please ensure you spelled it correctly.";
        case "NetworkingError":
            return "Networking error. This may be because the provided bucket name does not exist. Please ensure you have spelled it correctly.";
        case "InvalidBucketState":
            return "Invalid bucket state! Contact your AWS administrator.";
        case "ValidationError":
            return `Further validation required: ${message}`;
        case "SignatureDoesNotMatch":
            return "The provided secret token does not match access token. Please ensure that it is correct.";
        case "InvalidToken":
            return "Your session token has expired. Please log back in and try again.";
        case "InvalidClientTokenId":
            return "The provided access token is invalid. Please ensure that it is correct.";
        default:
            return `Unkown error ${code}. Message: ${message}`;
    }
}
exports.transcribe_error = transcribe_error;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,