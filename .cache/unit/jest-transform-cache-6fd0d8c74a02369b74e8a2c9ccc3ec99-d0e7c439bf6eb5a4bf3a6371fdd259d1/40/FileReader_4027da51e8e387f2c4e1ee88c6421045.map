{"version":3,"sources":["FileReader.vue"],"names":[],"mappings":";;;;;;;;;AA4CA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AAIA;;;;;;AAEA;AACA;AACA;AADA;AAGA;;;;;;;AAUA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;;AACA;AACA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AA5CA;AAAA;AAJA;AACA;AADA;AADA","sourcesContent":["<template>\n  <v-card class=\"elevation-0\">\n    <v-card-subtitle\n      >Easily load any supported Heimdall Data Format file</v-card-subtitle\n    >\n    <v-container>\n      <v-row>\n        <v-col cols=\"12\" align=\"center\">\n          <!-- Use inline style to emulate v-img props -->\n          <img\n            src=\"@/assets/logo-orange-tsp.svg\"\n            svg-inline\n            style=\"max-width: 164px; max-height: 164px;\"\n          />\n        </v-col>\n      </v-row>\n      <v-row>\n        <v-col cols=\"12\" align=\"center\">\n          <div class=\"d-flex flex-column justify-center\">\n            <span :class=\"title_class\">Heimdall</span>\n            <span :class=\"title_class\">Lite</span>\n          </div>\n        </v-col>\n      </v-row>\n      <v-row>\n        <v-spacer />\n        <v-col align=\"center\" cols=\"4\">\n          <UploadButton @files-selected=\"commit_files\" />\n        </v-col>\n        <v-col align=\"right\" cols=\"4\">\n          <a\n            href=\"https://mitre.github.io/heimdall-lite-1.0/\"\n            target=\"_blank\"\n            class=\"mr-2\"\n          >\n            Looking for 1.0?\n          </a>\n        </v-col>\n      </v-row>\n    </v-container>\n  </v-card>\n</template>\n\n<script lang=\"ts\">\nimport Vue from \"vue\";\nimport Component from \"vue-class-component\";\nimport { getModule } from \"vuex-module-decorators\";\nimport UploadButton from \"@/components/global/UploadButton.vue\";\nimport InspecIntakeModule, {\n  FileID,\n  next_free_file_ID\n} from \"@/store/report_intake\";\nimport AppInfoModule from \"@/store/app_info\";\n\n// We declare the props separately to make props types inferable.\nconst Props = Vue.extend({\n  props: {}\n});\n/**\n * File reader component for taking in inspec JSON data.\n * Uploads data to the store with unique IDs asynchronously as soon as data is entered.\n * Emits \"got-files\" with a list of the unique_ids of the loaded files.\n */\n@Component({\n  components: {\n    UploadButton\n  }\n})\nexport default class FileReader extends Props {\n  /** Callback for our file reader */\n  commit_files(files: File[]) {\n    let valid_ids: FileID[] = []; // Use this to track those that get successfully uploaded\n\n    // Promise an upload of each\n    let upload_promises = files.map(file => {\n      // Generate file id\n      let unique_id = next_free_file_ID();\n\n      // Submit it to be loaded, and display an error if it fails\n      let intake_module = getModule(InspecIntakeModule, this.$store);\n      return intake_module.loadFile({ file, unique_id }).then(err => {\n        if (err) {\n          console.error(`Error loading file ${file.name}`);\n          this.$toasted.global.error({\n            message: String(err),\n            isDark: this.$vuetify.theme.dark\n          });\n        } else {\n          // Store the given id as valid\n          valid_ids.push(unique_id);\n        }\n      });\n    });\n\n    // When they're all done, emit event.\n    // To use promise.all we must make each promise explicitly allow rejection without breaking promise.all failfast\n    let guaranteed_promises = upload_promises.map(p => p.catch(err => err));\n    Promise.all(guaranteed_promises).then(_ =>\n      this.$emit(\"got-files\", valid_ids)\n    );\n  }\n\n  get title_class(): string[] {\n    if (this.$vuetify.breakpoint.mdAndUp) {\n      return [\"display-4\", \"px-0\"];\n    } else {\n      return [\"display-2\", \"px-0\"];\n    }\n  }\n\n  get version(): string {\n    return getModule(AppInfoModule, this.$store).version;\n  }\n}\n</script>\n"]}