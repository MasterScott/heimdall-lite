{"version":3,"sources":["UploadButton.vue"],"names":[],"mappings":";;;;;;;;;AAqBA;;;;AACA;;;;;;AAEA;AACA;AACA;AADA;AAIA;;;;;;;AAQA;AACA;AACA;AACA;;AAKA;;AACA;AACA;AACA;AACA;AAGA;;AACA;AAEA;;;AACA;AACA;AACA;AACA;;AAtBA;AAAA;AAFA;AADA;;AA2BA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["<template>\n  <div class=\"caption font-weight-medium\">\n    <v-btn :small=\"$vuetify.breakpoint.smAndDown\" @click=\"show_selector\">\n      Upload\n      <v-icon :small=\"$vuetify.breakpoint.smAndDown\" class=\"pl-2\"\n        >mdi-file-upload</v-icon\n      >\n    </v-btn>\n    <div hidden>\n      <input\n        ref=\"real-input\"\n        type=\"file\"\n        multiple\n        @change=\"select_file\"\n        accept=\".json, application/json\"\n      />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport Vue from \"vue\";\nimport Component from \"vue-class-component\";\n\n// We declare the props separately to make props types inferable.\nconst Props = Vue.extend({\n  props: {}\n});\n\n/**\n * File reader component for taking in inspec JSON data.\n * Uploads data to the store with unique IDs asynchronously as soon as data is entered.\n * Emits \"got-files\" with a list of the unique_ids of the loaded files.\n */\n@Component({\n  components: {}\n})\nexport default class UploadButton extends Props {\n  /** Callback for our file reader */\n  select_file() {\n    let raw_files = (this.$refs[\"real-input\"] as any).files as\n      | FileList\n      | undefined\n      | null;\n    // Coerce into a more ergonomic type\n    let files = fix_files(raw_files);\n    if (files.length > 0) {\n      // Notify we got files\n      this.$emit(\"files-selected\", files);\n    }\n\n    // Clear\n    // this.curr_file = [];\n  }\n\n  /** Programatically show real input selector */\n  show_selector() {\n    let file_input = this.$refs[\"real-input\"];\n    (file_input as any).click();\n  }\n}\n/** Coerces the types held by a filereader into an array */\nfunction fix_files(f: FileList | null | undefined): File[] {\n  if (f === null || f === undefined) {\n    return [];\n  } else {\n    return [...f];\n  }\n}\n</script>\n"]}