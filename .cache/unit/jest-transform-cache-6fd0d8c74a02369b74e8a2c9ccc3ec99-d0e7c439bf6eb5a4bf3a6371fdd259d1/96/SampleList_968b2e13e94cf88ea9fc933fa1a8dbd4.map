{"version":3,"sources":["SampleList.vue"],"names":[],"mappings":";;;;;;;;;AAsBA;;;;AACA;;;;AACA;;AAEA;;;;AAKA;;;;;;AAOA;AACA;AACA;AADA;AAGA;;;;;;;AAQA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;;AAEA;AACA;AACA;AACA;AAEA;;;AACA;AACA;AACA;;AAGA;;AAEA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;;AAhFA;AAAA;AAFA;AADA","sourcesContent":["<template>\n  <v-card class=\"elevation-0\">\n    <v-card-subtitle>\n      Samples to show the power of the Heimdall application and supported HDF\n      formats\n    </v-card-subtitle>\n    <v-list>\n      <v-list-item v-for=\"(sample, index) in samples\" :key=\"index\">\n        <v-list-item-content>\n          <v-list-item-title v-text=\"sample.name\" />\n        </v-list-item-content>\n        <v-list-item-action>\n          <v-btn icon @click=\"load_sample(sample)\">\n            <v-icon>mdi-plus-circle</v-icon>\n          </v-btn>\n        </v-list-item-action>\n      </v-list-item>\n    </v-list>\n  </v-card>\n</template>\n\n<script lang=\"ts\">\nimport Vue from \"vue\";\nimport Component from \"vue-class-component\";\nimport { getModule } from \"vuex-module-decorators\";\nimport { defined } from \"@/utilities/async_util\";\nimport InspecIntakeModule, {\n  FileID,\n  next_free_file_ID\n} from \"@/store/report_intake\";\nimport InspecDataModule from \"../../../store/data_store\";\nimport AppInfoModule from \"../../../store/app_info\";\n\ninterface Sample {\n  name: string;\n  url: string;\n}\n\n// We declare the props separately to make props types inferable.\nconst Props = Vue.extend({\n  props: {}\n});\n/**\n * File reader component for taking in inspec JSON data.\n * Uploads data to the store with unique IDs asynchronously as soon as data is entered.\n * Emits \"got-files\" with a list of the unique_ids of the loaded files.\n */\n@Component({\n  components: {}\n})\nexport default class SampleList extends Props {\n  get samples(): Sample[] {\n    return [\n      {\n        name: \"Sonarqube Java Heimdall_tools Sample\",\n        url: `https://raw.githubusercontent.com/${this.repo}/master/samples/sonarqube_java_sample.json`\n      },\n      {\n        name: \"OWASP ZAP Webgoat Heimdall_tools Sample\",\n        url: `https://raw.githubusercontent.com/${this.repo}/master/samples/owasp_zap_webgoat.json`\n      },\n      {\n        name: \"OWASP ZAP Zero_WebAppSecurity Heimdall_tools Sample\",\n        url: `https://raw.githubusercontent.com/${this.repo}/master/samples/owasp_zap_zero.webappsecurity.json`\n      },\n      {\n        name: \"Fortify Heimdall_tools Sample\",\n        url: `https://raw.githubusercontent.com/${this.repo}/master/samples/fortify_h_tools_conv_webgoat.json`\n      },\n      {\n        name: \"AWS S3 Permissions Check InSpec Sample\",\n        url: `https://raw.githubusercontent.com/${this.repo}/master/samples/aws-s3-baseline.json`\n      },\n      {\n        name: \"AWS CIS Foundations Baseline InSpec Sample\",\n        url: `https://raw.githubusercontent.com/${this.repo}/master/samples/cis-aws-foundations-baseline.json`\n      },\n      {\n        name: \"NGINX Inspec Sample\",\n        url: `https://raw.githubusercontent.com/${this.repo}/master/samples/good_nginxresults.json`\n      },\n      {\n        name: \"Red Hat CVE Vulnerability Scan InSpec Sample\",\n        url: `https://raw.githubusercontent.com/${this.repo}/master/samples/rhel_cve_vulnerability_scan_baseline_with_failures.json`\n      },\n      {\n        name: \"RedHat 7 STIG Baseline InSpec Sample\",\n        url: `https://raw.githubusercontent.com/${this.repo}/master/samples/rhel7-results.json`\n      },\n      {\n        name: \"Ubuntu STIG Baseline InSpec Sample\",\n        url: `https://raw.githubusercontent.com/${this.repo}/master/samples/ubuntu-16.04-baseline-results.json`\n      }\n    ];\n  }\n\n  get repo(): string {\n    let mod = getModule(AppInfoModule, this.$store);\n    return `${mod.repo_org}/${mod.repo_name}`;\n  }\n\n  /** Callback for our list item clicks */\n  load_sample(sample: Sample) {\n    // Generate an id\n    let unique_id = next_free_file_ID();\n\n    // Get intake module\n    let intake_module = getModule(InspecIntakeModule, this.$store);\n    // Do fetch\n    fetch(sample.url, { method: \"get\" })\n      .then(response => response.text())\n      .then(text =>\n        intake_module.loadText({ filename: sample.name, unique_id, text })\n      )\n      .then(err => {\n        // Handle errors if necessary\n        if (err) {\n          throw `Error loading sample ${sample.name}`;\n        } else {\n          // Emit success\n          this.$emit(\"got-files\", [unique_id]);\n        }\n      })\n      .catch(err => {\n        // Toast whatever error we got\n        this.$toasted.global.error({\n          message: String(err),\n          isDark: this.$vuetify.theme.dark\n        });\n      });\n  }\n}\n</script>\n"]}