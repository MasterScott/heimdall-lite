70859f611bb0a5f240e7153deb1c74d5
;(function(){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _tslib = require("tslib");

var _vue = require("vue");

var _vue2 = _interopRequireDefault(_vue);

var _vueClassComponent = require("vue-class-component");

var _vueClassComponent2 = _interopRequireDefault(_vueClassComponent);

var _helper_util = require("../../../../utilities/helper_util");

var _FileList = require("@/components/global/upload_tabs/aws/FileList.vue");

var _FileList2 = _interopRequireDefault(_FileList);

var _splunk_util = require("../../../../utilities/splunk_util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Our saved fields
const local_username = new _helper_util.LocalStorageVal("splunk_username");
const local_password = new _helper_util.LocalStorageVal("splunk_password");
const local_hostname = new _helper_util.LocalStorageVal("splunk_hostname"); // We declare the props separately to make props types inferable.

const Props = _vue2.default.extend({});
/**
 *
 */


let SplunkAuth = class SplunkAuth extends Props {
  constructor() {
    super(...arguments);
    /** Models if currently displayed form is valid.
     * Shouldn't be used to interpret literally anything else as valid - just checks fields filled
     */

    this.valid = false;
    this.show_secret = false;
    /** State of input fields */

    this.username = "";
    this.password = "";
    this.hostname = "";
    /** Whether we are currently authenticating */

    this.logging_in = false;
    /** Form required field rules. Maybe eventually expand to other stuff */

    this.req_rule = v => (v || "").trim().length > 0 || "Field is Required";
  }

  try_login() {
    // Save credentials
    local_username.set(this.username);
    local_password.set(this.password);
    local_hostname.set(this.hostname); // Check splunk

    let s = new _splunk_util.SplunkEndpoint(this.hostname, this.username, this.password);
    this.logging_in = true;
    s.check_auth().then(ok => {
      // all goes well, proceed
      this.$emit("authenticated", s);
      this.logging_in = false;
    }).catch(err => {
      this.logging_in = false;
      this.$emit("error", err);
    });
  }
  /** Init our fields */


  mounted() {
    this.username = local_username.get_default("");
    this.password = local_password.get_default("");
    this.hostname = local_hostname.get_default("");
  }

};
SplunkAuth = (0, _tslib.__decorate)([(0, _vueClassComponent2.default)({
  components: {
    FileList: _FileList2.default
  }
})], SplunkAuth);
exports.default = SplunkAuth; //# sourceMappingURL=module.jsx.map
})()
var defaultExport = (module.exports.__esModule) ? module.exports.default : module.exports;var __vue__options__ = (typeof defaultExport === "function"? defaultExport.options: defaultExport)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-stepper-content',{attrs:{"step":"1"}},[_c('v-form',{model:{value:(_vm.valid),callback:function ($$v) {_vm.valid=$$v},expression:"valid"}},[_c('v-text-field',{attrs:{"label":"Username","rules":[_vm.req_rule]},model:{value:(_vm.username),callback:function ($$v) {_vm.username=$$v},expression:"username"}}),_vm._v(" "),_c('v-text-field',{attrs:{"label":"Password","rules":[_vm.req_rule],"append-icon":_vm.show_secret ? 'mdi-eye' : 'mdi-eye-off',"type":_vm.show_secret ? 'text' : 'password'},on:{"click:append":function($event){_vm.show_secret = !_vm.show_secret}},model:{value:(_vm.password),callback:function ($$v) {_vm.password=$$v},expression:"password"}}),_vm._v(" "),_c('v-text-field',{attrs:{"label":"Hostname","rules":[_vm.req_rule],"hint":"Ex: https://my.website.com:8089"},model:{value:(_vm.hostname),callback:function ($$v) {_vm.hostname=$$v},expression:"hostname"}})],1),_vm._v(" "),_c('v-row',{staticClass:"mx-1"},[_c('v-btn',{staticClass:"my-2",attrs:{"color":"primary","disabled":!_vm.valid || _vm.logging_in,"loading":_vm.logging_in},on:{"click":_vm.try_login}},[_vm._v("\n      Login\n    ")]),_vm._v(" "),_c('v-spacer'),_vm._v(" "),_c('v-btn',{on:{"click":function($event){return _vm.$emit('show-help')}}},[_vm._v("\n      Help\n      "),_c('v-icon',{staticClass:"ml-2"},[_vm._v("\n        mdi-help-circle\n      ")])],1)],1)],1)}
__vue__options__.staticRenderFns = []
